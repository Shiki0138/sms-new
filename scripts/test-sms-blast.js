#!/usr/bin/env node\n\n/**\n * SMS Blast Enhancement System Test Script\n * Tests the new SMS campaign, template, and bulk sending features\n */\n\nrequire('dotenv').config();\nconst axios = require('axios');\n\n// Configuration\nconst BASE_URL = process.env.BASE_URL || 'http://localhost:3002';\nconst TEST_EMAIL = 'test@salon-lumiere.com';\nconst TEST_PASSWORD = 'password123';\n\nclass SmsBlastTester {\n  constructor() {\n    this.token = null;\n    this.userId = null;\n  }\n\n  async login() {\n    try {\n      console.log('üîë Logging in...');\n      const response = await axios.post(`${BASE_URL}/api/auth/login`, {\n        email: TEST_EMAIL,\n        password: TEST_PASSWORD\n      });\n\n      this.token = response.data.token;\n      this.userId = response.data.user.id;\n      console.log('‚úÖ Login successful');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Login failed:', error.response?.data?.message || error.message);\n      return false;\n    }\n  }\n\n  getHeaders() {\n    return {\n      'Authorization': `Bearer ${this.token}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  async testServiceStatus() {\n    try {\n      console.log('\\nüìä Testing service status...');\n      const response = await axios.get(`${BASE_URL}/api/sms/status`, {\n        headers: this.getHeaders()\n      });\n\n      console.log('‚úÖ Service Status:', JSON.stringify(response.data, null, 2));\n      return true;\n    } catch (error) {\n      console.error('‚ùå Service status test failed:', error.response?.data?.message || error.message);\n      return false;\n    }\n  }\n\n  async testTemplateManagement() {\n    try {\n      console.log('\\nüìù Testing template management...');\n      \n      // Get existing templates\n      const getResponse = await axios.get(`${BASE_URL}/api/sms/templates`, {\n        headers: this.getHeaders()\n      });\n      console.log(`‚úÖ Found ${getResponse.data.templates.length} existing templates`);\n\n      // Create a new template\n      const newTemplate = {\n        name: 'Test Campaign Template',\n        description: 'A test template for SMS campaigns',\n        category: 'promotional',\n        content: 'Hello {{firstName}}! Special offer from {{salonName}}. Visit us today for {{discount}}% off!'\n      };\n\n      const createResponse = await axios.post(`${BASE_URL}/api/sms/templates`, newTemplate, {\n        headers: this.getHeaders()\n      });\n      console.log('‚úÖ Template created:', createResponse.data.template.name);\n      console.log(`   Variables detected: ${createResponse.data.template.variables.join(', ')}`);\n\n      return createResponse.data.template.id;\n    } catch (error) {\n      console.error('‚ùå Template management test failed:', error.response?.data?.message || error.message);\n      return null;\n    }\n  }\n\n  async testCampaignManagement(templateId = null) {\n    try {\n      console.log('\\nüìã Testing campaign management...');\n      \n      // Create a new campaign\n      const newCampaign = {\n        name: 'Test SMS Campaign',\n        description: 'A test SMS blast campaign',\n        type: 'promotional',\n        messageContent: 'Hello! This is a test SMS from our salon. Thank you for being our valued customer!',\n        templateId: templateId,\n        settings: {\n          enableTracking: true,\n          sendRate: 1,\n          timeWindow: {\n            start: '09:00',\n            end: '18:00',\n            timezone: 'Asia/Tokyo'\n          }\n        },\n        targetCriteria: {\n          hasPhoneNumber: true\n        }\n      };\n\n      const createResponse = await axios.post(`${BASE_URL}/api/sms/campaigns`, newCampaign, {\n        headers: this.getHeaders()\n      });\n      console.log('‚úÖ Campaign created:', createResponse.data.campaign.name);\n      console.log(`   Campaign ID: ${createResponse.data.campaign.id}`);\n      console.log(`   Status: ${createResponse.data.campaign.status}`);\n\n      return createResponse.data.campaign.id;\n    } catch (error) {\n      console.error('‚ùå Campaign management test failed:', error.response?.data?.message || error.message);\n      return null;\n    }\n  }\n\n  async testPhoneValidation() {\n    try {\n      console.log('\\nüìû Testing phone validation...');\n      \n      const testPhones = [\n        '090-1234-5678',\n        '+81-90-1234-5678',\n        '08012345678',\n        'invalid-phone',\n        ''\n      ];\n\n      const response = await axios.post(`${BASE_URL}/api/sms/validate-phones`, {\n        phoneNumbers: testPhones\n      }, {\n        headers: this.getHeaders()\n      });\n\n      console.log('‚úÖ Phone validation results:');\n      response.data.validationResults.forEach(result => {\n        const status = result.isValid ? '‚úÖ' : '‚ùå';\n        console.log(`   ${status} ${result.original} -> ${result.formatted || result.error}`);\n      });\n      console.log(`   Summary: ${response.data.summary.valid}/${response.data.summary.total} valid (${response.data.summary.validPercentage}%)`);\n      \n      return true;\n    } catch (error) {\n      console.error('‚ùå Phone validation test failed:', error.response?.data?.message || error.message);\n      return false;\n    }\n  }\n\n  async testBulkSmsWithCampaignFeatures() {\n    try {\n      console.log('\\nüéØ Testing enhanced bulk SMS...');\n      \n      const bulkRequest = {\n        recipients: [\n          {\n            phone: '090-1111-1111',\n            firstName: '„ÉÜ„Çπ„Éà',\n            lastName: 'Â§™ÈÉé'\n          },\n          {\n            phone: '090-2222-2222',\n            firstName: '„ÉÜ„Çπ„Éà',\n            lastName: 'Ëä±Â≠ê'\n          }\n        ],\n        message: 'Hello {{firstName}} {{lastName}}! This is a test SMS from {{salonName}}.',\n        campaignName: 'Test Bulk Campaign',\n        enableTracking: true,\n        settings: {\n          sendRate: 1\n        }\n      };\n\n      const response = await axios.post(`${BASE_URL}/api/sms/bulk`, bulkRequest, {\n        headers: this.getHeaders()\n      });\n\n      console.log('‚úÖ Enhanced bulk SMS results:');\n      console.log(`   Campaign ID: ${response.data.campaignId}`);\n      console.log(`   Total Recipients: ${response.data.totalRecipients}`);\n      console.log(`   Sent: ${response.data.sent}`);\n      console.log(`   Failed: ${response.data.failed}`);\n      console.log(`   Estimated Cost: ¬•${response.data.estimatedCost}`);\n      \n      if (response.data.insights && response.data.insights.length > 0) {\n        console.log('   Insights:');\n        response.data.insights.forEach(insight => {\n          console.log(`     - ${insight.message}`);\n        });\n      }\n\n      return response.data.campaignId;\n    } catch (error) {\n      console.error('‚ùå Enhanced bulk SMS test failed:', error.response?.data?.message || error.message);\n      if (error.response?.data?.error) {\n        console.error('   Error details:', error.response.data.error);\n      }\n      return null;\n    }\n  }\n\n  async testScheduledCampaign() {\n    try {\n      console.log('\\n‚è∞ Testing scheduled campaign...');\n      \n      // Schedule a campaign for 5 minutes from now\n      const scheduledTime = new Date(Date.now() + 5 * 60 * 1000);\n      \n      const bulkRequest = {\n        recipients: [\n          {\n            phone: '090-3333-3333',\n            firstName: '„Çπ„Ç±„Ç∏„É•„Éº„É´',\n            lastName: '„ÉÜ„Çπ„Éà'\n          }\n        ],\n        message: 'This is a scheduled SMS test message.',\n        campaignName: 'Scheduled Test Campaign',\n        scheduledAt: scheduledTime.toISOString(),\n        enableTracking: true\n      };\n\n      const response = await axios.post(`${BASE_URL}/api/sms/bulk`, bulkRequest, {\n        headers: this.getHeaders()\n      });\n\n      console.log('‚úÖ Campaign scheduled successfully:');\n      console.log(`   Campaign ID: ${response.data.campaignId}`);\n      console.log(`   Scheduled for: ${response.data.scheduledTime}`);\n      console.log(`   Recipients: ${response.data.recipientCount}`);\n\n      // Test cancellation\n      console.log('\\nüö´ Testing campaign cancellation...');\n      const cancelResponse = await axios.post(\n        `${BASE_URL}/api/sms/bulk/${response.data.campaignId}/cancel`,\n        {},\n        { headers: this.getHeaders() }\n      );\n\n      console.log('‚úÖ Campaign cancelled successfully');\n      return true;\n    } catch (error) {\n      console.error('‚ùå Scheduled campaign test failed:', error.response?.data?.message || error.message);\n      return false;\n    }\n  }\n\n  async runAllTests() {\n    console.log('üöÄ Starting SMS Blast Enhancement System Tests\\n');\n    console.log('=' .repeat(60));\n\n    // Login first\n    const loginSuccess = await this.login();\n    if (!loginSuccess) {\n      console.log('\\n‚ùå Cannot proceed without authentication');\n      return false;\n    }\n\n    let allTestsPassed = true;\n\n    // Test service status\n    const statusTest = await this.testServiceStatus();\n    allTestsPassed = allTestsPassed && statusTest;\n\n    // Test template management\n    const templateId = await this.testTemplateManagement();\n    allTestsPassed = allTestsPassed && (templateId !== null);\n\n    // Test campaign management\n    const campaignId = await this.testCampaignManagement(templateId);\n    allTestsPassed = allTestsPassed && (campaignId !== null);\n\n    // Test phone validation\n    const validationTest = await this.testPhoneValidation();\n    allTestsPassed = allTestsPassed && validationTest;\n\n    // Test enhanced bulk SMS\n    const bulkCampaignId = await this.testBulkSmsWithCampaignFeatures();\n    allTestsPassed = allTestsPassed && (bulkCampaignId !== null);\n\n    // Test scheduled campaign\n    const scheduledTest = await this.testScheduledCampaign();\n    allTestsPassed = allTestsPassed && scheduledTest;\n\n    // Final results\n    console.log('\\n' + '=' .repeat(60));\n    if (allTestsPassed) {\n      console.log('üéâ All SMS Blast Enhancement tests passed successfully!');\n      console.log('\\nüìã Summary:');\n      console.log('   ‚úÖ Service Status Check');\n      console.log('   ‚úÖ Template Management');\n      console.log('   ‚úÖ Campaign Management');\n      console.log('   ‚úÖ Phone Validation');\n      console.log('   ‚úÖ Enhanced Bulk SMS');\n      console.log('   ‚úÖ Scheduled Campaigns');\n    } else {\n      console.log('‚ùå Some tests failed. Please check the logs above.');\n    }\n\n    console.log('\\nüîó Available API Endpoints:');\n    console.log(`   üìã Campaigns: ${BASE_URL}/api/sms/campaigns`);\n    console.log(`   üìù Templates: ${BASE_URL}/api/sms/templates`);\n    console.log(`   üéØ Enhanced Bulk: ${BASE_URL}/api/sms/bulk`);\n    console.log(`   üìä Service Status: ${BASE_URL}/api/sms/status`);\n    console.log(`   üìû Validate Phones: ${BASE_URL}/api/sms/validate-phones`);\n\n    return allTestsPassed;\n  }\n}\n\n// Run tests if called directly\nif (require.main === module) {\n  const tester = new SmsBlastTester();\n  tester.runAllTests()\n    .then(success => {\n      process.exit(success ? 0 : 1);\n    })\n    .catch(error => {\n      console.error('\\nüí• Test runner crashed:', error.message);\n      process.exit(1);\n    });\n}\n\nmodule.exports = SmsBlastTester;